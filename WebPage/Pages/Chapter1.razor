@page "/chapter1"
@using WebPage.Implementation

<h1>Chapter 1</h1>

<h2>1.1 Exercise: Polynomial curve fitting</h2>
<p>
    Polynomial degree: <input @bind="Fig_1_2_polnomial_degree" type="number" style="width:100px;" />
</p>
<p>
    Noise seed: <input @bind="Fig_1_2_noise_seed" type="number" style="width:100px;" />
</p>
<button class="btn btn-primary" @onclick="Run">Optimize</button>
<hr>

@if (@restriction == null)
{
    <p><em>Please input polynomial degree and noise seed...</em></p>
}
else if (!@restriction.IsValid)
{
    <p><em>@restriction.ErrorMessage</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>X_test</th>
                <th>T_expect</th>
                <th>T_test</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < @linearRegressionResult.X_test.Count(); ++i)
            {
            <tr>
                <td>@linearRegressionResult.X_test[i]</td>
                <td>@linearRegressionResult.T_expect[i]</td>
                <td>@linearRegressionResult.T_test[i]</td>
            </tr>
            }
        </tbody>
    </table>
}

@*
    <h2>1.2 Probability theory</h2>
    <h3>1.2.1 Probability densities</h3>
    <h3>1.2.2 Expectations and covariances</h3>
    <h3>1.2.3 Bayesian probabilities</h3>
    <h3>1.2.4 The Gausian distribution</h3>
    <h3>1.2.5 Curve fitting re-visited</h3>
    <h3>1.2.6 Bayesian curve fitting</h3>

    <h2>1.3 Model selection</h2>

    <h2>1.4 The curse of dimentionality</h2>

    <h2>1.5 Decision theory</h2>
    <h3>1.5.1 Minimizing the misclassification rate</h3>
    <h3>1.5.2 Minimizing the expected loss</h3>
    <h3>1.5.3 The reject option</h3>
    <h3>1.5.4 Inference and decision</h3>
    <h3>1.5.5 Loss functions for regression</h3>

    <h2>1.6 Information theory</h2>
    <h3>1.6.1 Relative entropy and mutual information</h3>

    <h2>Exercises</h2>
    <h3>Exercise 1.1</h3>
*@

@code {
    private LinearRegressionResult linearRegressionResult;
    private Fig_1_2.Restriction restriction;

    private int? Fig_1_2_polnomial_degree { get; set; }
    private int? Fig_1_2_noise_seed { get; set; }

    private void Run()
    {
        if (Fig_1_2_polnomial_degree != null && Fig_1_2_noise_seed != null)
        {
            restriction = Fig_1_2.Check(Fig_1_2_polnomial_degree.Value, Fig_1_2_noise_seed.Value);
            if (restriction.IsValid)
                linearRegressionResult = Fig_1_2.Run(Fig_1_2_polnomial_degree.Value, Fig_1_2_noise_seed.Value);
        }
    }
}
